!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e(require("blockly/core"));else if("function"==typeof define&&define.amd)define(["blockly/core"],e);else{var i="object"==typeof exports?e(require("blockly/core")):e(t.Blockly);for(var s in i)("object"==typeof exports?exports:t)[s]=i[s]}}(this,(t=>(()=>{"use strict";var e={370:e=>{e.exports=t}},i={};function s(t){var l=i[t];if(void 0!==l)return l.exports;var n=i[t]={exports:{}};return e[t](n,n.exports,s),n.exports}s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var l={};s.r(l),s.d(l,{FieldMultilineInput:()=>o});var n=s(370);class o extends n.FieldTextInput{constructor(t,e,i){super(n.Field.SKIP_SETUP),t!==n.Field.SKIP_SETUP&&(i&&this.configure_(i),this.setValue(t),e&&this.setValidator(e),this.textGroup=null,this.maxLines_=1/0,this.isOverflowedY_=!1)}configure_(t){super.configure_(t),t.maxLines&&this.setMaxLines(t.maxLines)}toXml(t){return console.log("toXml.fieldElement: ",this.getValue()),t.textContent=this.getValue().replace(/\n/g,"&#10;"),t}fromXml(t){this.setValue(t.textContent.replace(/&#10;/g,"\n")),console.log("fromXml.fieldElement: ",this.getValue())}saveState(){const t=this.saveLegacyState(o);return null!==t?(console.log("saveState.legacyState: ",t),t):this.getValue()}loadState(t){console.log("loadState.state: ",t),this.loadLegacyState(n.Field,t)||this.setValue(t)}initView(){this.createBorderRect_(),this.textGroup=n.utils.dom.createSvgElement(n.utils.Svg.G,{class:"blocklyEditableText"},this.fieldGroup_)}getDisplayText_(){const t=this.getSourceBlock();if(!t)throw new Error("The field has not yet been attached to its input. Call appendField to attach it.");let e=this.getText();if(console.log("getDisplayText_.textLines: ",e),!e)return n.Field.NBSP;const i=e.split("\n");e="";const s=this.isOverflowedY_?this.maxLines_:i.length;for(let t=0;t<s;t++){let l=i[t];l.length>this.maxDisplayLength?l=l.substring(0,this.maxDisplayLength-4)+"...":this.isOverflowedY_&&t===s-1&&(l=l.substring(0,l.length-3)+"..."),l=l.replace(/\s/g,n.Field.NBSP),e+=l,t!==s-1&&(e+="\n")}return t.RTL&&(e+="‏"),e}doValueUpdate_(t){super.doValueUpdate_(t),null!==this.value_&&(this.isOverflowedY_=this.value_.split("\n").length>this.maxLines_)}render_(){const t=this.getSourceBlock();if(!t)throw new Error("The field has not yet been attached to its input. Call appendField to attach it.");let e;const i=this.textGroup;for(;e=i.firstChild;)i.removeChild(e);const s=this.getConstants();if(!s)throw Error("Constants not found");const l=this.getDisplayText_().split("\n");let o=0;for(let t=0;t<l.length;t++){const e=s.FIELD_TEXT_HEIGHT+s.FIELD_BORDER_RECT_Y_PADDING;n.utils.dom.createSvgElement(n.utils.Svg.TEXT,{class:"blocklyText blocklyMultilineText",x:s.FIELD_BORDER_RECT_X_PADDING,y:o+s.FIELD_BORDER_RECT_Y_PADDING,dy:s.FIELD_TEXT_BASELINE},i).appendChild(document.createTextNode(l[t])),o+=e}if(this.isBeingEdited_){const t=this.htmlInput_;this.isOverflowedY_?n.utils.dom.addClass(t,"blocklyHtmlTextAreaInputOverflowedY"):n.utils.dom.removeClass(t,"blocklyHtmlTextAreaInputOverflowedY")}if(this.updateSize_(),this.isBeingEdited_){t.RTL?setTimeout(this.resizeEditor_.bind(this),0):this.resizeEditor_();const e=this.htmlInput_;this.isTextValid_?(n.utils.dom.removeClass(e,"blocklyInvalidInput"),n.utils.aria.setState(e,n.utils.aria.State.INVALID,!1)):(n.utils.dom.addClass(e,"blocklyInvalidInput"),n.utils.aria.setState(e,n.utils.aria.State.INVALID,!0))}}updateSize_(){const t=this.getConstants();if(!t)throw Error("Constants not found");const e=this.textGroup.childNodes,i=t.FIELD_TEXT_FONTSIZE,s=t.FIELD_TEXT_FONTWEIGHT,l=t.FIELD_TEXT_FONTFAMILY;let o=0,r=0;for(let a=0;a<e.length;a++){const u=e[a],d=n.utils.dom.getFastTextWidth(u,i,s,l);d>o&&(o=d),r+=t.FIELD_TEXT_HEIGHT+(a>0?t.FIELD_BORDER_RECT_Y_PADDING:0)}if(this.isBeingEdited_){const t=String(this.value_).split("\n"),e=n.utils.dom.createSvgElement(n.utils.Svg.TEXT,{class:"blocklyText blocklyMultilineText"});for(let r=0;r<t.length;r++){t[r].length>this.maxDisplayLength&&(t[r]=t[r].substring(0,this.maxDisplayLength)),e.textContent=t[r];const a=n.utils.dom.getFastTextWidth(e,i,s,l);a>o&&(o=a)}const r=this.htmlInput_;o+=r.offsetWidth-r.clientWidth}this.borderRect_&&(r+=2*t.FIELD_BORDER_RECT_Y_PADDING,o+=2*t.FIELD_BORDER_RECT_X_PADDING+1,this.borderRect_.setAttribute("width",`${o}`),this.borderRect_.setAttribute("height",`${r}`)),this.size_={width:o,height:r},this.positionBorderRect_()}showEditor_(t,e){super.showEditor_(t,e),this.forceRerender()}widgetCreate_(){const t=n.WidgetDiv.getDiv(),e=this.workspace_.getScale(),i=this.getConstants();if(!i)throw Error("Constants not found");const s=document.createElement("textarea");s.className="blocklyHtmlInput blocklyHtmlTextAreaInput",s.setAttribute("spellcheck",String(this.spellcheck_));const l=i.FIELD_TEXT_FONTSIZE*e+"pt";t.style.fontSize=l,s.style.fontSize=l;const o=n.FieldTextInput.BORDERRADIUS*e+"px";s.style.borderRadius=o;const r=i.FIELD_BORDER_RECT_X_PADDING*e,a=i.FIELD_BORDER_RECT_Y_PADDING*e/2;s.style.padding=`${a}px ${r}px ${a}px ${r}px`;const u=i.FIELD_TEXT_HEIGHT+i.FIELD_BORDER_RECT_Y_PADDING;return s.style.lineHeight=u*e+"px",t.appendChild(s),s.value=s.defaultValue=this.getEditorText_(this.value_),s.setAttribute("data-untyped-default-value",String(this.value_)),s.setAttribute("data-old-value",""),n.utils.userAgent.GECKO?setTimeout(this.resizeEditor_.bind(this),0):this.resizeEditor_(),this.bindInputEvents_(s),s}setMaxLines(t){"number"==typeof t&&t>0&&t!==this.maxLines_&&(this.maxLines_=t,this.forceRerender())}getMaxLines(){return this.maxLines_}onHtmlInputKeyDown_(t){"Enter"!==t.key&&super.onHtmlInputKeyDown_(t)}static fromJson(t){return new this(n.utils.parsing.replaceMessageReferences(t.text),void 0,t)}}n.Css.register("\n  .blocklyHtmlTextAreaInput {\n    font-family: monospace;\n    resize: none;\n    overflow: hidden;\n    height: 100%;\n    text-align: left;\n  }\n\n  .blocklyHtmlTextAreaInputOverflowedY {\n    overflow-y: scroll;\n  }\n");const r={init:function(){this.appendDummyInput("NAME").appendField(new o("Enter \n new text here"),"NAME"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setTooltip(""),this.setHelpUrl(""),this.setColour(300)}},a={init:function(){this.appendDummyInput("NAME").appendField(new o("Enter \n new text here"),"NAME"),this.setOutput(!0,null),this.setTooltip(""),this.setHelpUrl(""),this.setColour(300)}};return n.registry.hasItem(n.registry.Type.FIELD,"field_multiline_input")||n.registry.register(n.registry.Type.FIELD,"field_multiline_input",o),n.common.defineBlocks({multiple_line_input_in:r,multiple_line_input_out:a}),l})()));
//# sourceMappingURL=index.js.map