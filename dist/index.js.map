{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@rainbowmarket/blockly_field_multiline_input/webpack/universalModuleDefinition","webpack://@rainbowmarket/blockly_field_multiline_input/external umd {\"root\":\"Blockly\",\"commonjs\":\"blockly/core\",\"commonjs2\":\"blockly/core\",\"amd\":\"blockly/core\"}","webpack://@rainbowmarket/blockly_field_multiline_input/webpack/bootstrap","webpack://@rainbowmarket/blockly_field_multiline_input/webpack/runtime/define property getters","webpack://@rainbowmarket/blockly_field_multiline_input/webpack/runtime/hasOwnProperty shorthand","webpack://@rainbowmarket/blockly_field_multiline_input/webpack/runtime/make namespace object","webpack://@rainbowmarket/blockly_field_multiline_input/./src/field/field.js","webpack://@rainbowmarket/blockly_field_multiline_input/./src/block/blocks.js","webpack://@rainbowmarket/blockly_field_multiline_input/./src/generator/generator_javascript.js","webpack://@rainbowmarket/blockly_field_multiline_input/./src/generator/generator_php.js","webpack://@rainbowmarket/blockly_field_multiline_input/./src/generator/generator_dart.js","webpack://@rainbowmarket/blockly_field_multiline_input/./src/generator/generator_python.js","webpack://@rainbowmarket/blockly_field_multiline_input/./src/generator/generator_lua.js","webpack://@rainbowmarket/blockly_field_multiline_input/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"blockly/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"blockly/core\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"blockly/core\")) : factory(root[\"Blockly\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, (__WEBPACK_EXTERNAL_MODULE__370__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__370__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as Blockly from 'blockly/core';\n\nexport class FieldMultilineInput extends Blockly.FieldTextInput {\n  constructor(value, validator, config) {\n    super(Blockly.Field.SKIP_SETUP);\n\n    if (value === Blockly.Field.SKIP_SETUP) return;\n    if (config) {\n      this.configure_(config);\n    }\n    this.setValue(value);\n    if (validator) {\n      this.setValidator(validator);\n    }\n\n    this.textGroup = null;\n    this.maxLines_ = Infinity;\n    this.isOverflowedY_ = false;\n  }\n\n  configure_(config) {\n    super.configure_(config);\n    if (config.maxLines) this.setMaxLines(config.maxLines);\n  }\n\n  toXml(fieldElement) {\n    fieldElement.textContent = this.getValue().replace(/\\n/g, '&#10;');\n    return fieldElement;\n  }\n\n  fromXml(fieldElement) {\n    this.setValue(fieldElement.textContent.replace(/&#10;/g, '\\n'));\n  }\n\n  saveState() {\n    const legacyState = this.saveLegacyState(FieldMultilineInput);\n    if (legacyState !== null) {\n      return legacyState;\n    }\n    return this.getValue();\n  }\n\n  loadState(state) {\n    if (this.loadLegacyState(Blockly.Field, state)) {\n      return;\n    }\n    this.setValue(state);\n  }\n\n  initView() {\n    this.createBorderRect_();\n    this.textGroup = Blockly.utils.dom.createSvgElement(\n      Blockly.utils.Svg.G,\n      { class: 'blocklyEditableText' },\n      this.fieldGroup_\n    );\n  }\n\n  getDisplayText_() {\n    const block = this.getSourceBlock();\n    if (!block) {\n      throw new Error('The field has not yet been attached to its input. Call appendField to attach it.');\n    }\n    let textLines = this.getText();\n    if (!textLines) {\n      return Blockly.Field.NBSP;\n    }\n    const lines = textLines.split('\\n');\n    textLines = '';\n    const displayLinesNumber = this.isOverflowedY_ ? this.maxLines_ : lines.length;\n    for (let i = 0; i < displayLinesNumber; i++) {\n      let text = lines[i];\n      if (text.length > this.maxDisplayLength) {\n        text = text.substring(0, this.maxDisplayLength - 4) + '...';\n      } else if (this.isOverflowedY_ && i === displayLinesNumber - 1) {\n        text = text.substring(0, text.length - 3) + '...';\n      }\n      text = text.replace(/\\s/g, Blockly.Field.NBSP);\n      textLines += text;\n      if (i !== displayLinesNumber - 1) {\n        textLines += '\\n';\n      }\n    }\n    if (block.RTL) {\n      textLines += '\\u200F';\n    }\n    return textLines;\n  }\n\n  doValueUpdate_(newValue) {\n    super.doValueUpdate_(newValue);\n    if (this.value_ !== null) {\n      this.isOverflowedY_ = this.value_.split('\\n').length > this.maxLines_;\n    }\n  }\n\n  render_() {\n    const block = this.getSourceBlock();\n    if (!block) {\n      throw new Error('The field has not yet been attached to its input. Call appendField to attach it.');\n    }\n    let currentChild;\n    const textGroup = this.textGroup;\n    while ((currentChild = textGroup.firstChild)) {\n      textGroup.removeChild(currentChild);\n    }\n\n    const constants = this.getConstants();\n    if (!constants) throw Error('Constants not found');\n    const lines = this.getDisplayText_().split('\\n');\n    let y = 0;\n    for (let i = 0; i < lines.length; i++) {\n      const lineHeight = constants.FIELD_TEXT_HEIGHT + constants.FIELD_BORDER_RECT_Y_PADDING;\n      const span = Blockly.utils.dom.createSvgElement(\n        Blockly.utils.Svg.TEXT,\n        {\n          class: 'blocklyText blocklyMultilineText',\n          x: constants.FIELD_BORDER_RECT_X_PADDING,\n          y: y + constants.FIELD_BORDER_RECT_Y_PADDING,\n          dy: constants.FIELD_TEXT_BASELINE,\n        },\n        textGroup\n      );\n      span.appendChild(document.createTextNode(lines[i]));\n      y += lineHeight;\n    }\n\n    if (this.isBeingEdited_) {\n      const htmlInput = this.htmlInput_;\n      if (this.isOverflowedY_) {\n        Blockly.utils.dom.addClass(htmlInput, 'blocklyHtmlTextAreaInputOverflowedY');\n      } else {\n        Blockly.utils.dom.removeClass(htmlInput, 'blocklyHtmlTextAreaInputOverflowedY');\n      }\n    }\n\n    this.updateSize_();\n\n    if (this.isBeingEdited_) {\n      if (block.RTL) {\n        setTimeout(this.resizeEditor_.bind(this), 0);\n      } else {\n        this.resizeEditor_();\n      }\n      const htmlInput = this.htmlInput_;\n      if (!this.isTextValid_) {\n        Blockly.utils.dom.addClass(htmlInput, 'blocklyInvalidInput');\n        Blockly.utils.aria.setState(htmlInput, Blockly.utils.aria.State.INVALID, true);\n      } else {\n        Blockly.utils.dom.removeClass(htmlInput, 'blocklyInvalidInput');\n        Blockly.utils.aria.setState(htmlInput, Blockly.utils.aria.State.INVALID, false);\n      }\n    }\n  }\n\n  updateSize_() {\n    const constants = this.getConstants();\n    if (!constants) throw Error('Constants not found');\n    const nodes = this.textGroup.childNodes;\n    const fontSize = constants.FIELD_TEXT_FONTSIZE;\n    const fontWeight = constants.FIELD_TEXT_FONTWEIGHT;\n    const fontFamily = constants.FIELD_TEXT_FONTFAMILY;\n    let totalWidth = 0;\n    let totalHeight = 0;\n    for (let i = 0; i < nodes.length; i++) {\n      const tspan = nodes[i];\n      const textWidth = Blockly.utils.dom.getFastTextWidth(tspan, fontSize, fontWeight, fontFamily);\n      if (textWidth > totalWidth) {\n        totalWidth = textWidth;\n      }\n      totalHeight += constants.FIELD_TEXT_HEIGHT + (i > 0 ? constants.FIELD_BORDER_RECT_Y_PADDING : 0);\n    }\n    if (this.isBeingEdited_) {\n      const actualEditorLines = String(this.value_).split('\\n');\n      const dummyTextElement = Blockly.utils.dom.createSvgElement(Blockly.utils.Svg.TEXT, { class: 'blocklyText blocklyMultilineText' });\n      for (let i = 0; i < actualEditorLines.length; i++) {\n        if (actualEditorLines[i].length > this.maxDisplayLength) {\n          actualEditorLines[i] = actualEditorLines[i].substring(0, this.maxDisplayLength);\n        }\n        dummyTextElement.textContent = actualEditorLines[i];\n        const lineWidth = Blockly.utils.dom.getFastTextWidth(dummyTextElement, fontSize, fontWeight, fontFamily);\n        if (lineWidth > totalWidth) {\n          totalWidth = lineWidth;\n        }\n      }\n\n      const htmlInput = this.htmlInput_;\n      const scrollbarWidth = htmlInput.offsetWidth - htmlInput.clientWidth;\n      totalWidth += scrollbarWidth;\n    }\n    if (this.borderRect_) {\n      totalHeight += constants.FIELD_BORDER_RECT_Y_PADDING * 2;\n      totalWidth += constants.FIELD_BORDER_RECT_X_PADDING * 2 + 1;\n      this.borderRect_.setAttribute('width', `${totalWidth}`);\n      this.borderRect_.setAttribute('height', `${totalHeight}`);\n    }\n    this.size_ = { width: totalWidth, height: totalHeight };\n    this.positionBorderRect_();\n  }\n\n  showEditor_(e, quietInput) {\n    super.showEditor_(e, quietInput);\n    this.forceRerender();\n  }\n\n  widgetCreate_() {\n    const div = Blockly.WidgetDiv.getDiv();\n    const scale = this.workspace_.getScale();\n    const constants = this.getConstants();\n    if (!constants) throw Error('Constants not found');\n\n    const htmlInput = document.createElement('textarea');\n    htmlInput.className = 'blocklyHtmlInput blocklyHtmlTextAreaInput';\n    htmlInput.setAttribute('spellcheck', String(this.spellcheck_));\n    const fontSize = constants.FIELD_TEXT_FONTSIZE * scale + 'pt';\n    div.style.fontSize = fontSize;\n    htmlInput.style.fontSize = fontSize;\n    const borderRadius = Blockly.FieldTextInput.BORDERRADIUS * scale + 'px';\n    htmlInput.style.borderRadius = borderRadius;\n    const paddingX = constants.FIELD_BORDER_RECT_X_PADDING * scale;\n    const paddingY = (constants.FIELD_BORDER_RECT_Y_PADDING * scale) / 2;\n    htmlInput.style.padding = `${paddingY}px ${paddingX}px ${paddingY}px ${paddingX}px`;\n    const lineHeight = constants.FIELD_TEXT_HEIGHT + constants.FIELD_BORDER_RECT_Y_PADDING;\n    htmlInput.style.lineHeight = lineHeight * scale + 'px';\n\n    div.appendChild(htmlInput);\n    htmlInput.value = htmlInput.defaultValue = this.getEditorText_(this.value_);\n    htmlInput.setAttribute('data-untyped-default-value', String(this.value_));\n    htmlInput.setAttribute('data-old-value', '');\n    if (Blockly.utils.userAgent.GECKO) {\n      setTimeout(this.resizeEditor_.bind(this), 0);\n    } else {\n      this.resizeEditor_();\n    }\n\n    this.bindInputEvents_(htmlInput);\n    return htmlInput;\n  }\n\n  setMaxLines(maxLines) {\n    if (typeof maxLines === 'number' && maxLines > 0 && maxLines !== this.maxLines_) {\n      this.maxLines_ = maxLines;\n      this.forceRerender();\n    }\n  }\n\n  getMaxLines() {\n    return this.maxLines_;\n  }\n\n  onHtmlInputKeyDown_(e) {\n    if (e.key !== 'Enter') {\n      super.onHtmlInputKeyDown_(e);\n    }\n  }\n\n  static fromJson(options) {\n    const text = Blockly.utils.parsing.replaceMessageReferences(options.text);\n    return new this(text, undefined, options);\n  }\n}\n\nexport function registerFieldMultilineInput() {\n  Blockly.fieldRegistry.register('field_multilinetext', FieldMultilineInput);\n}\n\nBlockly.Css.register(`\n  .blocklyHtmlTextAreaInput {\n    font-family: monospace;\n    resize: none;\n    overflow: hidden;\n    height: 100%;\n    text-align: left;\n  }\n\n  .blocklyHtmlTextAreaInputOverflowedY {\n    overflow-y: scroll;\n  }\n`);","import * as Blockly from 'blockly/core';\nimport { FieldMultilineInput } from '../field/field.js'\n\nconst multiple_line_input_in = {\n  init: function () {\n    this.appendDummyInput('NAME')\n      .appendField(new FieldMultilineInput('Enter \\n new text here'), 'NAME');\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setTooltip('');\n    this.setHelpUrl('');\n    this.setColour(300);\n  }\n};\n\nconst multiple_line_input_out = {\n  init: function () {\n    this.appendDummyInput('NAME')\n      .appendField(new FieldMultilineInput('Enter \\n new text here'), 'NAME');\n    this.setOutput(true, null);\n    this.setTooltip('');\n    this.setHelpUrl('');\n    this.setColour(300);\n  }\n};\n\nfunction registerBlocks() {\n  Blockly.common.defineBlocks({\n    multiple_line_input_in: multiple_line_input_in,\n    multiple_line_input_out: multiple_line_input_out\n  })\n}\nexport { registerBlocks };","import * as Blockly from 'blockly/core';\n\nBlockly.JavaScript.forBlock['multiple_line_input_in'] = function(block) {\n    const text = block.getFieldValue('TEXT');\n    return [`'${text.replace(/\\n/g, '\\\\n').replace(/'/g, \"\\\\'\")}'`, Blockly.JavaScript.ORDER_ATOMIC];\n}\n\nBlockly.JavaScript.forBlock['multiple_line_input_out'] = function(block) {\n    const text = block.getFieldValue('TEXT');\n    return `'${text.replace(/\\n/g, '\\\\n').replace(/'/g, \"\\\\'\")}'`;\n}","import * as Blockly from 'blockly/core';\n\nBlockly.PHP['multiple_line_input_in'] = function (block) {\n    const text = block.getFieldValue('TEXT');\n    return [`'${text.replace(/\\n/g, '\\\\n')}'`, Blockly.PHP.ORDER_ATOMIC];\n};\nBlockly.PHP['multiple_line_input_out'] = function (block) {\n    const text = block.getFieldValue('TEXT');\n    return `'${text.replace(/\\n/g, '\\\\n')}'`;\n};\n\n\n","import * as Blockly from 'blockly/core';\n\nBlockly.Dart['multiple_line_input_in'] = function (block) {\n    const text = block.getFieldValue('TEXT');\n    return [`'${text.replace(/\\n/g, '\\\\n')}'`, Blockly.Dart.ORDER_ATOMIC];\n};\n\nBlockly.Dart['multiple_line_input_out'] = function (block) {\n    const text = block.getFieldValue('TEXT');\n    return `'${text.replace(/\\n/g, '\\\\n')}'`;\n};\n\n\n\n","import * as Blockly from 'blockly/core';\n\nBlockly.Python['multiple_line_input_in'] = function (block) {\n    const text = block.getFieldValue('TEXT');\n    return [`'''${text.replace(/'''/g, \"\\\\'''\")}'''`, Blockly.Python.ORDER_ATOMIC];\n};\nBlockly.Python['multiple_line_input_out'] = function (block) {\n    const text = block.getFieldValue('TEXT');\n    return `'''${text.replace(/'''/g, \"\\\\'''\")}'''`;\n};\n","import * as Blockly from 'blockly/core';\n\nBlockly.Lua['multiple_line_input_in'] = function (block) {\n    const text = block.getFieldValue('TEXT');\n    return [`'${text.replace(/\\n/g, '\\\\n')}'`, Blockly.Lua.ORDER_ATOMIC];\n};\nBlockly.Lua['multiple_line_input_out'] = function (block) {\n    const text = block.getFieldValue('TEXT');\n    return `'${text.replace(/\\n/g, '\\\\n')}'`;\n};\n\n\n\n","import * as Blockly from 'blockly/core';\n\nimport { FieldMultilineInput } from './field/field.js'\nimport { registerBlocks } from './block/blocks.js'\nimport './generator/index.js'\n\nif (!Blockly.registry.hasItem(Blockly.registry.Type.FIELD, 'field_multiline_input')) {\n  Blockly.registry.register(\n    Blockly.registry.Type.FIELD,\n    'field_multiline_input',\n    FieldMultilineInput\n  );\n}\nregisterBlocks();\nexport { FieldMultilineInput }"],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE__370__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","FieldMultilineInput","constructor","validator","config","super","SKIP_SETUP","configure_","setValue","setValidator","textGroup","maxLines_","Infinity","isOverflowedY_","maxLines","setMaxLines","toXml","fieldElement","textContent","getValue","replace","fromXml","saveState","legacyState","saveLegacyState","loadState","state","loadLegacyState","initView","createBorderRect_","dom","createSvgElement","Svg","G","class","fieldGroup_","getDisplayText_","block","getSourceBlock","Error","textLines","getText","NBSP","lines","split","displayLinesNumber","length","text","maxDisplayLength","substring","RTL","doValueUpdate_","newValue","value_","render_","currentChild","firstChild","removeChild","constants","getConstants","y","lineHeight","FIELD_TEXT_HEIGHT","FIELD_BORDER_RECT_Y_PADDING","TEXT","x","FIELD_BORDER_RECT_X_PADDING","dy","FIELD_TEXT_BASELINE","appendChild","document","createTextNode","isBeingEdited_","htmlInput","htmlInput_","addClass","removeClass","updateSize_","setTimeout","resizeEditor_","bind","isTextValid_","aria","setState","State","INVALID","nodes","childNodes","fontSize","FIELD_TEXT_FONTSIZE","fontWeight","FIELD_TEXT_FONTWEIGHT","fontFamily","FIELD_TEXT_FONTFAMILY","totalWidth","totalHeight","tspan","textWidth","getFastTextWidth","actualEditorLines","String","dummyTextElement","lineWidth","offsetWidth","clientWidth","borderRect_","setAttribute","size_","width","height","positionBorderRect_","showEditor_","e","quietInput","forceRerender","widgetCreate_","div","getDiv","scale","workspace_","getScale","createElement","className","spellcheck_","style","borderRadius","BORDERRADIUS","paddingX","paddingY","padding","defaultValue","getEditorText_","userAgent","GECKO","bindInputEvents_","getMaxLines","onHtmlInputKeyDown_","fromJson","options","parsing","replaceMessageReferences","register","multiple_line_input_in","init","appendDummyInput","appendField","setPreviousStatement","setNextStatement","setTooltip","setHelpUrl","setColour","multiple_line_input_out","setOutput","forBlock","getFieldValue","ORDER_ATOMIC","hasItem","Type","FIELD","defineBlocks"],"sourceRoot":""}